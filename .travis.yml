stages:
  - test-utils, tests -- linux, debug, gcc, cppcheck, coverage
  - test-utils, tests -- osx, release with debug info, clang

git:
  depth: 1

jobs:
  include:
     - stage: test-utils, tests -- linux, debug, gcc, cppcheck, coverage
       sudo: required
       dist: trusty
       language: cpp
       env: BUILD_TYPE="Debug"
       compiler: g++
       os: linux
       addons:
         apt:
           sources:
             - ubuntu-toolchain-r-test
           packages:
             - g++-6
             - cppcheck
       before_install:
         - pip install --user cpp-coveralls
       install: export CXX="g++-6"
       script:
         - set -e

         - cppcheck --enable=all -I include --language=c++ --platform=unix64 --std=c++11 --check-config --suppress=missingIncludeSystem
                    -v ./tests

         - cmake -Bbuild -H. -DCMAKE_BUILD_TYPE:STRING=$BUILD_TYPE
         - cmake -Bbuild/tests/unit -Htests/unit -Dtest-utils_DIR:PATH=$(pwd)/build -DCMAKE_BUILD_TYPE:STRING=$BUILD_TYPE
                 -DCOVERAGE:BOOL=ON
         - cmake --build build/tests/unit --target run-all-tests-verbose --config $BUILD_TYPE

         - bash <(curl -s https://codecov.io/bash)

         - find build -name "CMakeCXXCompilerId.c*" > code_coverage_excludes
         - find build -name "CheckFunctionExists.c*" >> code_coverage_excludes
         - find build -name "feature_tests.c*" >> code_coverage_excludes
         - readonly EXCLUDE_EXPRESSION=$(cat code_coverage_excludes | while read -r a; do echo "-e $a"; done | tr '\n' ' ')
         - echo $EXCLUDE_EXPRESSION
         - coveralls --gcov-options '\-lp'
                     -e build/tests/unit/gtest-src
                     -e cmake-helpers
                     -e tests
                     $EXCLUDE_EXPRESSION

         - set +e
